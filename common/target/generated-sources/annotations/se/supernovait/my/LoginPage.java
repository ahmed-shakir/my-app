package se.supernovait.my;
import com.codename1.rad.annotations.*;
import com.codename1.rad.controllers.*;
import se.supernovait.my.*;
import static com.codename1.rad.util.NonNull.nonNull;
import static com.codename1.rad.util.NonNull.nonNullEntries;
import com.codename1.ui.spinner.Picker;
import com.codename1.rad.schemas.*;
import com.codename1.rad.ui.builders.*;
import ca.weblite.shared.components.*;
import com.codename1.rad.models.*;
import com.codename1.rad.nodes.*;
import com.codename1.rad.ui.entityviews.*;
import com.codename1.rad.ui.beans.*;
import com.codename1.rad.propertyviews.*;
import com.codename1.ui.*;
import com.codename1.ui.plaf.*;
import com.codename1.components.*;
import static com.codename1.ui.CN.*;
import com.codename1.ui.layouts.*;
import com.codename1.rad.ui.ViewContext;
import com.codename1.rad.ui.EntityView;
@Autogenerated
public class LoginPage extends AbstractLoginPage<LoginPageModel> implements LoginPageSchema {
    private final ViewContext<LoginPageModel> context;
    private final FormController formController;
    private final ApplicationController applicationController;
    private final AppSectionController sectionController;
    private final ViewController viewController;
    private final FormController parentFormController;
    private java.util.List<Runnable> __initOnceListeners;
    private java.util.List<Runnable> __deinitListeners;
    // Placeholder for the row model when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private com.codename1.rad.models.Entity rowModel;
    // Placeholder for the row index when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private int rowIndex;
    // Placeholder for the row selected state when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private boolean rowSelected;
    // Placeholder for the row focused state when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private boolean rowFocused;
    // Placeholder for the EntityListView when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private com.codename1.rad.ui.entityviews.EntityListView rowList;
    private EntityView view = this;
    private EntityView rowView;
    private ViewContext subContext;
    private Container _currentContainer;
    private static ViewContext<LoginPageModel> wrapContext(ViewContext<LoginPageModel> context) {
        se.supernovait.my.controllers.LoginController _viewController = new se.supernovait.my.controllers.LoginController(context.getController());
        return _viewController.createViewContext(LoginPageModel.class, context.getEntity());
    }

    private Component registerViewController(Component cmp) {
        this.context.getController().setView(cmp);        return this.context.getController().getView();
    }

    @Override
    public LoginPageModel getEntity(){ return (LoginPageModel)super.getEntity();}
    public LoginPage(@Inject ViewContext<LoginPageModel> context) {
        super(wrapContext(context));
        this.context = getContext();
        this.formController = this.context.getController().getFormController();
        this.viewController = this.context.getController();
        this.applicationController = this.context.getController().getApplicationController();
        this.sectionController = this.context.getController().getSectionController();
        this.parentFormController = (this.formController == null || this.formController.getParent() == null) ? null : this.formController.getParent().getFormController();
        getAllStyles().stripMarginAndPadding();
        setLayout(new BorderLayout());
        _currentContainer = this;
        add(BorderLayout.CENTER, registerViewController(createComponent0()));
    }
    private com.codename1.ui.Container createComponent0() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("componentForm.formBottomPaddingEditingMode", "true");
         attributes.put("rad-id", "0");
         attributes.put("safeArea", "true");
         attributes.put("view-controller", "se.supernovait.my.controllers.LoginController");
         attributes.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
         attributes.put("xsi:noNamespaceSchemaLocation", "LoginPage.xsd");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "border", attributes);
        _builder.setParentContainer(_currentContainer, null);
        // componentForm.formBottomPaddingEditingMode=true
        
        // safeArea=true
        
        // xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
        
        // xsi:noNamespaceSchemaLocation=LoginPage.xsd
        
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // safeArea=true
        _cmp.setSafeArea(true);
        // xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
        
        // xsi:noNamespaceSchemaLocation=LoginPage.xsd
        
        // componentForm.formBottomPaddingEditingMode=true
        {
final com.codename1.ui.Container __fcmp = _cmp;
addInitOnceListener(()->{com.codename1.ui.Form __tmpReceiver___fcmp = null;{Object __tmp___tmpReceiver___fcmp=__fcmp.getComponentForm();__tmpReceiver___fcmp=(__tmp___tmpReceiver___fcmp==null)?null:(com.codename1.ui.Form)__tmp___tmpReceiver___fcmp;}if (__tmpReceiver___fcmp!=null)__tmpReceiver___fcmp.setFormBottomPaddingEditingMode(true);});
}

        // 21 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 21 child nodes
        // Child tag define-category is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag title is type com.codename1.rad.ui.beans.Title
        // Create bean com.codename1.rad.ui.beans.Title
        createBean6();
        // Child tag y is type com.codename1.ui.Container
        // Add child component  with child tag y
        _cmp.addComponent(_builder.parseConstraint("center"), createComponent8());
        // Child tag border is type com.codename1.ui.Container
        // Add child component  with child tag border
        _cmp.addComponent(_builder.parseConstraint("south"), createComponent17());
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Label createComponent7() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("fontIcon", "(char)0xe900");
         attributes.put("iconUIID", "SupernovaIcon");
         attributes.put("rad-id", "7");
        com.codename1.ui.Label _cmp = new com.codename1.ui.Label();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label>(_cmp, context, "label", attributes);
        // iconUIID=SupernovaIcon
        _cmp.setIconUIID("SupernovaIcon");
        // fontIcon=(char)0xe900
        _cmp.setFontIcon((char)0xe900);
        // 0 child nodes
        // Create child components
        // 0 child nodes
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Container createComponent8() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("layout-constraint", "center");
         attributes.put("rad-id", "8");
         attributes.put("scrollableY", "true");
         attributes.put("uiid", "SignupPageContent");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "y", attributes);
        _builder.setParentContainer(_currentContainer, null);
        // scrollableY=true
        
        // uiid=SignupPageContent
        
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // uiid=SignupPageContent
        _cmp.setUIID("SignupPageContent");
        // scrollableY=true
        _cmp.setScrollableY(true);
        // 13 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 13 child nodes
        // Child tag label is type com.codename1.ui.Label
        // Add child component  with child tag label
        {
            com.codename1.ui.Component _childCmp = createComponent9();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radTextField is type com.codename1.rad.propertyviews.TextFieldPropertyView
        // Add child component  with child tag radTextField
        {
            com.codename1.ui.Component _childCmp = createComponent10();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radLabel is type com.codename1.rad.propertyviews.LabelPropertyView
        // Add child component  with child tag radLabel
        {
            com.codename1.ui.Component _childCmp = createComponent11();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radTextField is type com.codename1.rad.propertyviews.TextFieldPropertyView
        // Add child component  with child tag radTextField
        {
            com.codename1.ui.Component _childCmp = createComponent12();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radLabel is type com.codename1.rad.propertyviews.LabelPropertyView
        // Add child component  with child tag radLabel
        {
            com.codename1.ui.Component _childCmp = createComponent13();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag flow is type com.codename1.ui.Container
        // Add child component  with child tag flow
        {
            com.codename1.ui.Component _childCmp = createComponent14();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Label createComponent9() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "9");
         attributes.put("uiid", "SignupPageTitle");
        com.codename1.ui.Label _cmp = new com.codename1.ui.Label();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label>(_cmp, context, "label", attributes);
        _cmp.setText("Login to MY");        // uiid=SignupPageTitle
        _cmp.setUIID("SignupPageTitle");
        // 1 child nodes
        // Create child components
        // 1 child nodes
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.TextFieldPropertyView createComponent10() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("component.constraint", "TextArea.USERNAME");
         attributes.put("component.hint", "Phone, email or username");
         attributes.put("rad-id", "10");
         attributes.put("tag", "phoneEmailOrUsername");
        com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder(context, "radTextField", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.TextField _injectedValue = null;
            if (_injectedValue != null) _builder.textField((com.codename1.ui.TextField)_injectedValue);
        }
        // component.constraint=TextArea.USERNAME
        
        // component.hint=Phone, email or username
        
        // tag=phoneEmailOrUsername
        _builder.tag(phoneEmailOrUsername);
        com.codename1.rad.propertyviews.TextFieldPropertyView _cmp = (com.codename1.rad.propertyviews.TextFieldPropertyView)_builder.getComponent();
        // component.constraint=TextArea.USERNAME
        {com.codename1.ui.TextField __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.TextField)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setConstraint(TextArea.USERNAME);}
        // component.hint=Phone, email or username
        {com.codename1.ui.TextField __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.TextField)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setHint("Phone, email or username");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.LabelPropertyView createComponent11() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-hidden", "${phoneEmailOrUsernameErrorMessage}.isEmpty()");
         attributes.put("component.uiid", "FieldErrorMessage");
         attributes.put("rad-id", "11");
         attributes.put("rad-transition", "hidden 0.3s");
         attributes.put("tag", "phoneEmailOrUsernameErrorMessage");
        com.codename1.rad.ui.builders.LabelPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.LabelPropertyViewBuilder(context, "radLabel", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.Label _injectedValue = null;
            if (_injectedValue != null) _builder.label((com.codename1.ui.Label)_injectedValue);
        }
        // component.uiid=FieldErrorMessage
        
        // tag=phoneEmailOrUsernameErrorMessage
        _builder.tag(phoneEmailOrUsernameErrorMessage);
        com.codename1.rad.propertyviews.LabelPropertyView _cmp = (com.codename1.rad.propertyviews.LabelPropertyView)_builder.getComponent();
        // hidden=${phoneEmailOrUsernameErrorMessage}.isEmpty()
        _cmp.setHidden(new com.codename1.rad.models.PropertySelector(context.getEntity(), phoneEmailOrUsernameErrorMessage).isEmpty());
        // component.uiid=FieldErrorMessage
        {com.codename1.ui.Label __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.Label)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setUIID("FieldErrorMessage");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        {
            // Binding for bind-hidden=${phoneEmailOrUsernameErrorMessage}.isEmpty()
            final com.codename1.rad.propertyviews.LabelPropertyView _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isHidden();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = new com.codename1.rad.models.PropertySelector(context.getEntity(), phoneEmailOrUsernameErrorMessage).isEmpty();
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setHidden(_newVal);
                        _fcmp.getParent().animateLayout(300);

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-hidden
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.TextFieldPropertyView createComponent12() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("component.constraint", "TextArea.PASSWORD");
         attributes.put("component.hint", "Password");
         attributes.put("rad-id", "12");
         attributes.put("tag", "password");
        com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder(context, "radTextField", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.TextField _injectedValue = null;
            if (_injectedValue != null) _builder.textField((com.codename1.ui.TextField)_injectedValue);
        }
        // component.constraint=TextArea.PASSWORD
        
        // component.hint=Password
        
        // tag=password
        _builder.tag(password);
        com.codename1.rad.propertyviews.TextFieldPropertyView _cmp = (com.codename1.rad.propertyviews.TextFieldPropertyView)_builder.getComponent();
        // component.constraint=TextArea.PASSWORD
        {com.codename1.ui.TextField __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.TextField)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setConstraint(TextArea.PASSWORD);}
        // component.hint=Password
        {com.codename1.ui.TextField __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.TextField)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setHint("Password");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.LabelPropertyView createComponent13() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-hidden", "${passwordErrorMessage}.isEmpty()");
         attributes.put("component.uiid", "FieldErrorMessage");
         attributes.put("rad-id", "13");
         attributes.put("rad-transition", "hidden 0.3s");
         attributes.put("tag", "passwordErrorMessage");
        com.codename1.rad.ui.builders.LabelPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.LabelPropertyViewBuilder(context, "radLabel", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.Label _injectedValue = null;
            if (_injectedValue != null) _builder.label((com.codename1.ui.Label)_injectedValue);
        }
        // component.uiid=FieldErrorMessage
        
        // tag=passwordErrorMessage
        _builder.tag(passwordErrorMessage);
        com.codename1.rad.propertyviews.LabelPropertyView _cmp = (com.codename1.rad.propertyviews.LabelPropertyView)_builder.getComponent();
        // hidden=${passwordErrorMessage}.isEmpty()
        _cmp.setHidden(new com.codename1.rad.models.PropertySelector(context.getEntity(), passwordErrorMessage).isEmpty());
        // component.uiid=FieldErrorMessage
        {com.codename1.ui.Label __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.Label)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setUIID("FieldErrorMessage");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        {
            // Binding for bind-hidden=${passwordErrorMessage}.isEmpty()
            final com.codename1.rad.propertyviews.LabelPropertyView _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isHidden();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = new com.codename1.rad.models.PropertySelector(context.getEntity(), passwordErrorMessage).isEmpty();
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setHidden(_newVal);
                        _fcmp.getParent().animateLayout(300);

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-hidden
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Container createComponent14() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "14");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "flow", attributes);
        _builder.setParentContainer(_currentContainer, null);
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // 5 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 5 child nodes
        // Child tag label is type com.codename1.ui.Label
        // Add child component  with child tag label
        {
            com.codename1.ui.Component _childCmp = createComponent15();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag button is type com.codename1.ui.Button
        // Add child component  with child tag button
        {
            com.codename1.ui.Component _childCmp = createComponent16();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Label createComponent15() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "15");
         attributes.put("uiid", "SmallLabel");
        com.codename1.ui.Label _cmp = new com.codename1.ui.Label();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label>(_cmp, context, "label", attributes);
        _cmp.setText("Don't have an account yet?");        // uiid=SmallLabel
        _cmp.setUIID("SmallLabel");
        // 1 child nodes
        // Create child components
        // 1 child nodes
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Button createComponent16() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-href", "#SignupPage");
         attributes.put("rad-id", "16");
         attributes.put("uiid", "SmallLink");
        com.codename1.ui.Button _cmp = new com.codename1.ui.Button();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button>(_cmp, context, "button", attributes);
        _cmp.setText("Sign up");        // uiid=SmallLink
        _cmp.setUIID("SmallLink");
        // 1 child nodes
        // Create child components
        // 1 child nodes
        // Set up bindings
        // Set up action Bindings
        _cmp.addActionListener(event -> {
            if (event.isConsumed()) return;
        com.codename1.rad.controllers.FormController _rad_href_controller = (com.codename1.rad.controllers.FormController)getContext().getController().createObjectWithFactory(se.supernovait.my.ISignupPageController.class, new Object[]{formController});
        if (_rad_href_controller == null) {
            _rad_href_controller = new se.supernovait.my.SignupPageController(formController);
        }
        _rad_href_controller.show();
        });
        return _cmp;
    }
    private com.codename1.ui.Container createComponent17() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("layout-constraint", "south");
         attributes.put("rad-id", "17");
         attributes.put("uiid", "SignupPageSouth");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "border", attributes);
        _builder.setParentContainer(_currentContainer, null);
        // uiid=SignupPageSouth
        
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // uiid=SignupPageSouth
        _cmp.setUIID("SignupPageSouth");
        // 5 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 5 child nodes
        // Child tag x is type com.codename1.ui.Container
        // Add child component  with child tag x
        _cmp.addComponent(_builder.parseConstraint("west"), createComponent18());
        // Child tag x is type com.codename1.ui.Container
        // Add child component  with child tag x
        _cmp.addComponent(_builder.parseConstraint("east"), createComponent20());
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Container createComponent18() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("layout-constraint", "west");
         attributes.put("rad-id", "18");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "x", attributes);
        _builder.setParentContainer(_currentContainer, null);
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // 3 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 3 child nodes
        // Child tag button is type com.codename1.ui.Button
        // Add child component  with child tag button
        {
            com.codename1.ui.Component _childCmp = createComponent19();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Button createComponent19() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-href", "#ForgotPasswordPage");
         attributes.put("rad-id", "19");
        com.codename1.ui.Button _cmp = new com.codename1.ui.Button();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button>(_cmp, context, "button", attributes);
        _cmp.setText("Forgot Password?");        // 1 child nodes
        // Create child components
        // 1 child nodes
        // Set up bindings
        // Set up action Bindings
        _cmp.addActionListener(event -> {
            if (event.isConsumed()) return;
        com.codename1.rad.controllers.FormController _rad_href_controller = (com.codename1.rad.controllers.FormController)getContext().getController().createObjectWithFactory(se.supernovait.my.IForgotPasswordPageController.class, new Object[]{formController});
        if (_rad_href_controller == null) {
            _rad_href_controller = new se.supernovait.my.ForgotPasswordPageController(formController);
        }
        _rad_href_controller.show();
        });
        return _cmp;
    }
    private com.codename1.ui.Container createComponent20() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("layout-constraint", "east");
         attributes.put("rad-id", "20");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "x", attributes);
        _builder.setParentContainer(_currentContainer, null);
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // 3 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 3 child nodes
        // Child tag button is type com.codename1.ui.Button
        // Add child component  with child tag button
        {
            com.codename1.ui.Component _childCmp = createComponent21();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Button createComponent21() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-enabled", "!${phoneEmailOrUsername}.isEmpty()");
         attributes.put("rad-id", "21");
         attributes.put("text", "Login");
        com.codename1.ui.Button _cmp = new com.codename1.ui.Button();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button>(_cmp, context, "button", attributes);
        // enabled=!${phoneEmailOrUsername}.isEmpty()
        _cmp.setEnabled(!new com.codename1.rad.models.PropertySelector(context.getEntity(), phoneEmailOrUsername).isEmpty());
        // text=Login
        _cmp.setText("Login");
        // 3 child nodes
        // Create child components
        // 3 child nodes
        // Child tag bind-action is type null
        // Set up bindings
        {
            // Binding for bind-enabled=!${phoneEmailOrUsername}.isEmpty()
            final com.codename1.ui.Button _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isEnabled();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = !new com.codename1.rad.models.PropertySelector(context.getEntity(), phoneEmailOrUsername).isEmpty();
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setEnabled(_newVal);

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-enabled
        // Set up action Bindings
        {
            ActionNode __action = getViewNode().getInheritedAction(LOGIN);
            if (__action == null) _cmp.setVisible(false);
            else {
                com.codename1.ui.Button _fcmp = _cmp;
                ActionNode _action = __action;
                com.codename1.rad.ui.DefaultActionViewFactory.initUI(_fcmp, context.getEntity(), _action);
                Runnable _onUpdate = () -> {
                    com.codename1.rad.ui.DefaultActionViewFactory.update(_fcmp, context.getEntity(), _action);
                };
                com.codename1.ui.events.ActionListener<PropertyChangeEvent> _pce = pcl -> {
                    _onUpdate.run();
                };
                Runnable _onBind = () -> {
                    context.getEntity().addPropertyChangeListener(_pce);
                };
                Runnable _onUnbind = () -> {
                    context.getEntity().removePropertyChangeListener(_pce);
                };
                addBindListener(_onBind);
                addUnbindListener(_onUnbind);
                if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                    ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
                } else {
                    addUpdateListener(_onUpdate);
                }
            }
        }
        return _cmp;
    }
    private com.codename1.rad.ui.beans.Title createBean6() {
        com.codename1.rad.ui.beans.Title _bean = new com.codename1.rad.ui.beans.Title(new com.codename1.rad.ui.ViewContext(context.getController(), context.getEntity()));
        {
            com.codename1.ui.Component _injectedValue = createComponent7();
            if (_injectedValue != null) _bean.setComponent((com.codename1.ui.Component)_injectedValue);
        }
        // 4 child nodes
        // Create child nodes
        // 4 child nodes
        return _bean;
    }
    @Override
    public void commit() {}
    @Override
    public void update() {}
    @Override
    public void activate() {
        super.activate();
    }
    private <T extends Node> T _setParent(Class<T> cls, T node) {
        node.setParent(getViewNode());
        return node;
    }
    private <T> T _getInjectedParameter(Class<T> type, ViewContext context, Controller controller) {
        T lookedUp = (T)controller.lookup(type);
        if (lookedUp != null) return lookedUp;
        if (type == ViewContext.class) return (T)context;
        if (Entity.class.isAssignableFrom(type)) return (T)context.getEntity();
        if (type.isAssignableFrom(this.getClass())) return (T)this;
        if (type.isAssignableFrom(controller.getClass())) return (T)controller;
        if (type.isAssignableFrom(FormController.class)) return (T)formController;
        if (type.isAssignableFrom(ApplicationController.class)) return (T)applicationController;
        if (type.isAssignableFrom(ViewController.class)) return (T)viewController;
        return null;
    }
    @Override
    protected void initComponent() {
        super.initComponent();
        if (__initOnceListeners != null && !__initOnceListeners.isEmpty()) {
            java.util.List<Runnable> toRun = new java.util.ArrayList<Runnable>(__initOnceListeners);
            __initOnceListeners = null;
            for (Runnable r : toRun) r.run();
        }
    }
    @Override
    protected void deinitialize() {
        if (__deinitListeners != null && !__deinitListeners.isEmpty()) {
            java.util.List<Runnable> toRun = new java.util.ArrayList<Runnable>(__deinitListeners);
            for (Runnable r : toRun) r.run();
        }
        super.deinitialize();
    }
    private void addInitOnceListener(Runnable r) {
        if (__initOnceListeners == null) __initOnceListeners = new java.util.ArrayList<>();
        __initOnceListeners.add(r);
    }
    private void addDeinitListener(Runnable r) {
        if (__deinitListeners == null) __deinitListeners = new java.util.ArrayList<>();
        __deinitListeners.add(r);
    }
    private void back() {
        com.codename1.rad.controllers.ActionSupport.dispatchEvent(new com.codename1.rad.controllers.FormController.FormBackEvent(this));
    }
}
