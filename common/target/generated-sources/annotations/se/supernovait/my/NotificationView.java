package se.supernovait.my;
import com.codename1.rad.annotations.*;
import com.codename1.rad.controllers.*;
import se.supernovait.my.*;
import se.supernovait.my.controllers.NotificationController;
import se.supernovait.my.models.Notification;
import se.supernovait.my.services.NotificationService;
import static com.codename1.rad.util.NonNull.nonNull;
import static com.codename1.rad.util.NonNull.nonNullEntries;
import com.codename1.ui.spinner.Picker;
import com.codename1.rad.schemas.*;
import com.codename1.rad.ui.builders.*;
import ca.weblite.shared.components.*;
import com.codename1.rad.models.*;
import com.codename1.rad.nodes.*;
import com.codename1.rad.ui.entityviews.*;
import com.codename1.rad.ui.beans.*;
import com.codename1.rad.propertyviews.*;
import com.codename1.ui.*;
import com.codename1.ui.plaf.*;
import com.codename1.components.*;
import static com.codename1.ui.CN.*;
import com.codename1.ui.layouts.*;
import com.codename1.rad.ui.ViewContext;
import com.codename1.rad.ui.EntityView;
@Autogenerated
public class NotificationView extends AbstractNotificationView<Notification> implements NotificationViewSchema {
    private final ViewContext<Notification> context;
    private final FormController formController;
    private final ApplicationController applicationController;
    private final AppSectionController sectionController;
    private final ViewController viewController;
    private final FormController parentFormController;
    private java.util.List<Runnable> __initOnceListeners;
    private java.util.List<Runnable> __deinitListeners;
    // Placeholder for the row model when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private com.codename1.rad.models.Entity rowModel;
    // Placeholder for the row index when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private int rowIndex;
    // Placeholder for the row selected state when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private boolean rowSelected;
    // Placeholder for the row focused state when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private boolean rowFocused;
    // Placeholder for the EntityListView when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private com.codename1.rad.ui.entityviews.EntityListView rowList;
    private EntityView view = this;
    private EntityView rowView;
    private ViewContext subContext;
    private Container _currentContainer;
    NotificationService notificationService;
    com.codename1.ui.Button button;
    com.codename1.rad.propertyviews.LabelPropertyView notification;
    private void script9(com.codename1.ui.Container it) {

        notification.getComponent().setBadgeText(context.getEntity().isNew() ? " " : "");
        /*button.addActionListener(e -> {
            notificationService.openNotification(context.getEntity().getId()); // TODO: refresh view
        });*/
    

    }
    private static ViewContext<Notification> wrapContext(ViewContext<Notification> context) {
        NotificationController _viewController = new NotificationController(context.getController());
        return _viewController.createViewContext(Notification.class, context.getEntity());
    }

    private Component registerViewController(Component cmp) {
        this.context.getController().setView(cmp);        return this.context.getController().getView();
    }

    @Override
    public Notification getEntity(){ return (Notification)super.getEntity();}
    public NotificationView(@Inject ViewContext<Notification> context) {
        super(wrapContext(context));
        this.context = getContext();
        this.formController = this.context.getController().getFormController();
        this.viewController = this.context.getController();
        this.applicationController = this.context.getController().getApplicationController();
        this.sectionController = this.context.getController().getSectionController();
        this.parentFormController = (this.formController == null || this.formController.getParent() == null) ? null : this.formController.getParent().getFormController();
        getAllStyles().stripMarginAndPadding();
        setLayout(new BorderLayout());
        _currentContainer = this;
        add(BorderLayout.CENTER, registerViewController(createComponent0()));
    }
    private com.codename1.ui.Container createComponent0() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "0");
         attributes.put("rad-model", "Notification");
         attributes.put("view-controller", "NotificationController");
         attributes.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
         attributes.put("xsi:noNamespaceSchemaLocation", "NotificationView.xsd");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "y", attributes);
        _builder.setParentContainer(_currentContainer, null);
        // xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
        
        // xsi:noNamespaceSchemaLocation=NotificationView.xsd
        
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
        
        // xsi:noNamespaceSchemaLocation=NotificationView.xsd
        
        // 11 child nodes
        notificationService=getContext().getController().lookup(NotificationService.class);
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 11 child nodes
        // Child tag import is type null
        // Child tag define-category is type null
        // Child tag border is type com.codename1.ui.Container
        // Add child component  with child tag border
        {
            com.codename1.ui.Component _childCmp = createComponent4();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // <script> tag
        script9(_cmp);
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Container createComponent4() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "4");
         attributes.put("rad-leadComponent", "#ShowDetailsButton");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "border", attributes);
        _builder.setParentContainer(_currentContainer, null);
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // 7 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 7 child nodes
        // Child tag button is type com.codename1.ui.Button
        // Add child component  with child tag button
        _cmp.addComponent(_builder.parseConstraint("north"), createComponent5());
        // Child tag label is type com.codename1.ui.Label
        // Add child component  with child tag label
        _cmp.addComponent(_builder.parseConstraint("west"), createComponent7());
        // Child tag radLabel is type com.codename1.rad.propertyviews.LabelPropertyView
        // Add child component  with child tag radLabel
        _cmp.addComponent(_builder.parseConstraint("center"), createComponent8());
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        {
            com.codename1.ui.ComponentSelector _leadComponentSelector = com.codename1.ui.ComponentSelector.select("#ShowDetailsButton", _cmp);
            if (!_leadComponentSelector.isEmpty()) {
                _cmp.setLeadComponent(_leadComponentSelector.asComponent());
            }
        }
        return _cmp;
    }
    private com.codename1.ui.Button createComponent5() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("hidden", "true");
         attributes.put("layout-constraint", "north");
         attributes.put("name", "ShowDetailsButton");
         attributes.put("rad-href", "#NotificationDetailsPage{context.getEntity()}");
         attributes.put("rad-id", "5");
         attributes.put("rad-var", "button");
        com.codename1.ui.Button _cmp = new com.codename1.ui.Button();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button>(_cmp, context, "button", attributes);
        // hidden=true
        _cmp.setHidden(true);
        // name=ShowDetailsButton
        _cmp.setName("ShowDetailsButton");
        // 3 child nodes
        // Create child components
        // 3 child nodes
        // Child tag bind-action is type null
        // Set up bindings
        // Set up action Bindings
        {
            ActionNode __action = getViewNode().getInheritedAction(VIEW_NOTIFICATION);
            if (__action == null) _cmp.setVisible(false);
            else {
                com.codename1.ui.Button _fcmp = _cmp;
                // Creating proxy copy of action because a default handler was provided
                // and we don't want to modify the original action.
                __action = (ActionNode)__action.createProxy(__action.getParent());
                class AfterActionCallback_ implements ActionNode.AfterActionCallback {
                    public void onSucess(com.codename1.ui.events.ActionEvent evt) {
                        ActionNode.ActionNodeEvent event = (ActionNode.ActionNodeEvent)evt;
                        if (event.isConsumed()) return;
                        com.codename1.ui.Button it = _fcmp;
                                                com.codename1.rad.controllers.FormController _rad_href_controller = (com.codename1.rad.controllers.FormController)getContext().getController().createObjectWithFactory(se.supernovait.my.INotificationDetailsPageController.class, new Object[]{formController, context.getEntity()});
                                if (_rad_href_controller == null) {
                                    _rad_href_controller = new se.supernovait.my.NotificationDetailsPageController(formController, se.supernovait.my.models.NotificationWrapper.wrap(se.supernovait.my.models.NotificationWrapper.wrap(context.getEntity())));
                                }
                                _rad_href_controller.show();

                    }
                }
                __action.addAfterActionCallback(new AfterActionCallback_());
                ActionNode _action = __action;
                com.codename1.rad.ui.DefaultActionViewFactory.initUI(_fcmp, context.getEntity(), _action);
                Runnable _onUpdate = () -> {
                    com.codename1.rad.ui.DefaultActionViewFactory.update(_fcmp, context.getEntity(), _action);
                };
                com.codename1.ui.events.ActionListener<PropertyChangeEvent> _pce = pcl -> {
                    _onUpdate.run();
                };
                Runnable _onBind = () -> {
                    context.getEntity().addPropertyChangeListener(_pce);
                };
                Runnable _onUnbind = () -> {
                    context.getEntity().removePropertyChangeListener(_pce);
                };
                addBindListener(_onBind);
                addUnbindListener(_onUnbind);
                if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                    ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
                } else {
                    addUpdateListener(_onUpdate);
                }
            }
        }
        button = _cmp;
        return _cmp;
    }
    private com.codename1.ui.Label createComponent7() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("layout-constraint", "west");
         attributes.put("materialIcon", "FontImage.MATERIAL_INFO");
         attributes.put("rad-id", "7");
        com.codename1.ui.Label _cmp = new com.codename1.ui.Label();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label>(_cmp, context, "label", attributes);
        // materialIcon=FontImage.MATERIAL_INFO
        _cmp.setMaterialIcon(FontImage.MATERIAL_INFO);
        // 0 child nodes
        // Create child components
        // 0 child nodes
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.LabelPropertyView createComponent8() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("component.badgeUIID", "MyBadge");
         attributes.put("component.uiid", "MyH2");
         attributes.put("layout-constraint", "center");
         attributes.put("rad-id", "8");
         attributes.put("rad-var", "notification");
         attributes.put("tag", "Notification.title");
        com.codename1.rad.ui.builders.LabelPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.LabelPropertyViewBuilder(context, "radLabel", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.Label _injectedValue = null;
            if (_injectedValue != null) _builder.label((com.codename1.ui.Label)_injectedValue);
        }
        // component.badgeUIID=MyBadge
        
        // component.uiid=MyH2
        
        // tag=Notification.title
        _builder.tag(Notification.title);
        com.codename1.rad.propertyviews.LabelPropertyView _cmp = (com.codename1.rad.propertyviews.LabelPropertyView)_builder.getComponent();
        // component.badgeUIID=MyBadge
        {com.codename1.ui.Label __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.Label)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setBadgeUIID("MyBadge");}
        // component.uiid=MyH2
        {com.codename1.ui.Label __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.Label)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setUIID("MyH2");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        notification = _cmp;
        return _cmp;
    }
    @Override
    public void commit() {}
    @Override
    public void update() {}
    @Override
    public void activate() {
        super.activate();
    }
    private <T extends Node> T _setParent(Class<T> cls, T node) {
        node.setParent(getViewNode());
        return node;
    }
    private <T> T _getInjectedParameter(Class<T> type, ViewContext context, Controller controller) {
        T lookedUp = (T)controller.lookup(type);
        if (lookedUp != null) return lookedUp;
        if (type == ViewContext.class) return (T)context;
        if (Entity.class.isAssignableFrom(type)) return (T)context.getEntity();
        if (type.isAssignableFrom(this.getClass())) return (T)this;
        if (type.isAssignableFrom(controller.getClass())) return (T)controller;
        if (type.isAssignableFrom(FormController.class)) return (T)formController;
        if (type.isAssignableFrom(ApplicationController.class)) return (T)applicationController;
        if (type.isAssignableFrom(ViewController.class)) return (T)viewController;
        return null;
    }
    @Override
    protected void initComponent() {
        super.initComponent();
        if (__initOnceListeners != null && !__initOnceListeners.isEmpty()) {
            java.util.List<Runnable> toRun = new java.util.ArrayList<Runnable>(__initOnceListeners);
            __initOnceListeners = null;
            for (Runnable r : toRun) r.run();
        }
    }
    @Override
    protected void deinitialize() {
        if (__deinitListeners != null && !__deinitListeners.isEmpty()) {
            java.util.List<Runnable> toRun = new java.util.ArrayList<Runnable>(__deinitListeners);
            for (Runnable r : toRun) r.run();
        }
        super.deinitialize();
    }
    private void addInitOnceListener(Runnable r) {
        if (__initOnceListeners == null) __initOnceListeners = new java.util.ArrayList<>();
        __initOnceListeners.add(r);
    }
    private void addDeinitListener(Runnable r) {
        if (__deinitListeners == null) __deinitListeners = new java.util.ArrayList<>();
        __deinitListeners.add(r);
    }
    private void back() {
        com.codename1.rad.controllers.ActionSupport.dispatchEvent(new com.codename1.rad.controllers.FormController.FormBackEvent(this));
    }
}
