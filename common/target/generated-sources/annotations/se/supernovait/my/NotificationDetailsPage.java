package se.supernovait.my;
import com.codename1.rad.annotations.*;
import com.codename1.rad.controllers.*;
import se.supernovait.my.*;
import se.supernovait.my.models.Notification;
import se.supernovait.my.services.NotificationService;
import static com.codename1.rad.util.NonNull.nonNull;
import static com.codename1.rad.util.NonNull.nonNullEntries;
import com.codename1.ui.spinner.Picker;
import com.codename1.rad.schemas.*;
import com.codename1.rad.ui.builders.*;
import ca.weblite.shared.components.*;
import com.codename1.rad.models.*;
import com.codename1.rad.nodes.*;
import com.codename1.rad.ui.entityviews.*;
import com.codename1.rad.ui.beans.*;
import com.codename1.rad.propertyviews.*;
import com.codename1.ui.*;
import com.codename1.ui.plaf.*;
import com.codename1.components.*;
import static com.codename1.ui.CN.*;
import com.codename1.ui.layouts.*;
import com.codename1.rad.ui.ViewContext;
import com.codename1.rad.ui.EntityView;
@Autogenerated
public class NotificationDetailsPage extends AbstractNotificationDetailsPage<Notification> implements NotificationDetailsPageSchema {
    private final ViewContext<Notification> context;
    private final FormController formController;
    private final ApplicationController applicationController;
    private final AppSectionController sectionController;
    private final ViewController viewController;
    private final FormController parentFormController;
    private java.util.List<Runnable> __initOnceListeners;
    private java.util.List<Runnable> __deinitListeners;
    // Placeholder for the row model when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private com.codename1.rad.models.Entity rowModel;
    // Placeholder for the row index when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private int rowIndex;
    // Placeholder for the row selected state when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private boolean rowSelected;
    // Placeholder for the row focused state when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private boolean rowFocused;
    // Placeholder for the EntityListView when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private com.codename1.rad.ui.entityviews.EntityListView rowList;
    private EntityView view = this;
    private EntityView rowView;
    private ViewContext subContext;
    private Container _currentContainer;
    private static ViewContext<Notification> wrapContext(ViewContext<Notification> context) {
        com.codename1.rad.controllers.ViewController _viewController = new com.codename1.rad.controllers.ViewController(context.getController());
        return _viewController.createViewContext(Notification.class, context.getEntity());
    }

    private Component registerViewController(Component cmp) {
        this.context.getController().setView(cmp);        return this.context.getController().getView();
    }

    @Override
    public Notification getEntity(){ return (Notification)super.getEntity();}
    public NotificationDetailsPage(@Inject ViewContext<Notification> context) {
        super(wrapContext(context));
        this.context = getContext();
        this.formController = this.context.getController().getFormController();
        this.viewController = this.context.getController();
        this.applicationController = this.context.getController().getApplicationController();
        this.sectionController = this.context.getController().getSectionController();
        this.parentFormController = (this.formController == null || this.formController.getParent() == null) ? null : this.formController.getParent().getFormController();
        getAllStyles().stripMarginAndPadding();
        setLayout(new BorderLayout());
        _currentContainer = this;
        add(BorderLayout.CENTER, registerViewController(createComponent0()));
    }
    private com.codename1.ui.Container createComponent0() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "0");
         attributes.put("rad-model", "Notification");
         attributes.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
         attributes.put("xsi:noNamespaceSchemaLocation", "NotificationDetailsPage.xsd");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "y", attributes);
        _builder.setParentContainer(_currentContainer, null);
        // xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
        
        // xsi:noNamespaceSchemaLocation=NotificationDetailsPage.xsd
        
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
        
        // xsi:noNamespaceSchemaLocation=NotificationDetailsPage.xsd
        
        // 7 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 7 child nodes
        // Child tag import is type null
        // Child tag title is type com.codename1.rad.ui.beans.Title
        // Create bean com.codename1.rad.ui.beans.Title
        createBean2();
        // Child tag y is type com.codename1.ui.Container
        // Add child component  with child tag y
        {
            com.codename1.ui.Component _childCmp = createComponent4();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Label createComponent3() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "3");
         attributes.put("text", "Notification");
        com.codename1.ui.Label _cmp = new com.codename1.ui.Label();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label>(_cmp, context, "label", attributes);
        // text=Notification
        _cmp.setText("Notification");
        // 0 child nodes
        // Create child components
        // 0 child nodes
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Container createComponent4() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "4");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "y", attributes);
        _builder.setParentContainer(_currentContainer, null);
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // 3 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 3 child nodes
        // Child tag y is type com.codename1.ui.Container
        // Add child component  with child tag y
        {
            com.codename1.ui.Component _childCmp = createComponent5();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Container createComponent5() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "5");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "y", attributes);
        _builder.setParentContainer(_currentContainer, null);
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // 13 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 13 child nodes
        // Child tag label is type com.codename1.ui.Label
        // Add child component  with child tag label
        {
            com.codename1.ui.Component _childCmp = createComponent6();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radSpanLabel is type com.codename1.rad.propertyviews.SpanLabelPropertyView
        // Add child component  with child tag radSpanLabel
        {
            com.codename1.ui.Component _childCmp = createComponent7();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag label is type com.codename1.ui.Label
        // Add child component  with child tag label
        {
            com.codename1.ui.Component _childCmp = createComponent8();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radSpanLabel is type com.codename1.rad.propertyviews.SpanLabelPropertyView
        // Add child component  with child tag radSpanLabel
        {
            com.codename1.ui.Component _childCmp = createComponent9();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag label is type com.codename1.ui.Label
        // Add child component  with child tag label
        {
            com.codename1.ui.Component _childCmp = createComponent10();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radLabel is type com.codename1.rad.propertyviews.LabelPropertyView
        // Add child component  with child tag radLabel
        {
            com.codename1.ui.Component _childCmp = createComponent11();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Label createComponent6() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "6");
         attributes.put("text", "Title:");
        com.codename1.ui.Label _cmp = new com.codename1.ui.Label();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label>(_cmp, context, "label", attributes);
        // text=Title:
        _cmp.setText("Title:");
        // 0 child nodes
        // Create child components
        // 0 child nodes
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.SpanLabelPropertyView createComponent7() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "7");
         attributes.put("tag", "Notification.title");
        com.codename1.rad.ui.builders.SpanLabelPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.SpanLabelPropertyViewBuilder(context, "radSpanLabel", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.components.SpanLabel _injectedValue = nonNull(context.getController().lookup(com.codename1.components.SpanLabel.class), null);
            if (_injectedValue != null) _builder.spanLabel((com.codename1.components.SpanLabel)_injectedValue);
        }
        // tag=Notification.title
        _builder.tag(Notification.title);
        com.codename1.rad.propertyviews.SpanLabelPropertyView _cmp = (com.codename1.rad.propertyviews.SpanLabelPropertyView)_builder.getComponent();
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Label createComponent8() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "8");
         attributes.put("text", "Body:");
        com.codename1.ui.Label _cmp = new com.codename1.ui.Label();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label>(_cmp, context, "label", attributes);
        // text=Body:
        _cmp.setText("Body:");
        // 0 child nodes
        // Create child components
        // 0 child nodes
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.SpanLabelPropertyView createComponent9() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "9");
         attributes.put("tag", "Notification.body");
        com.codename1.rad.ui.builders.SpanLabelPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.SpanLabelPropertyViewBuilder(context, "radSpanLabel", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.components.SpanLabel _injectedValue = nonNull(context.getController().lookup(com.codename1.components.SpanLabel.class), null);
            if (_injectedValue != null) _builder.spanLabel((com.codename1.components.SpanLabel)_injectedValue);
        }
        // tag=Notification.body
        _builder.tag(Notification.body);
        com.codename1.rad.propertyviews.SpanLabelPropertyView _cmp = (com.codename1.rad.propertyviews.SpanLabelPropertyView)_builder.getComponent();
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Label createComponent10() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "10");
         attributes.put("text", "Timestamp:");
        com.codename1.ui.Label _cmp = new com.codename1.ui.Label();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label>(_cmp, context, "label", attributes);
        // text=Timestamp:
        _cmp.setText("Timestamp:");
        // 0 child nodes
        // Create child components
        // 0 child nodes
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.LabelPropertyView createComponent11() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("dateFormat", "ShortDate");
         attributes.put("rad-id", "11");
         attributes.put("tag", "Notification.timestamp");
        com.codename1.rad.ui.builders.LabelPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.LabelPropertyViewBuilder(context, "radLabel", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.Label _injectedValue = null;
            if (_injectedValue != null) _builder.label((com.codename1.ui.Label)_injectedValue);
        }
        // dateFormat=ShortDate
        _builder.setDateFormat(com.codename1.rad.ui.builders.PropertyViewBuilder.DateFormatterEnum.ShortDate);
        // tag=Notification.timestamp
        _builder.tag(Notification.timestamp);
        com.codename1.rad.propertyviews.LabelPropertyView _cmp = (com.codename1.rad.propertyviews.LabelPropertyView)_builder.getComponent();
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.ui.beans.Title createBean2() {
        com.codename1.rad.ui.beans.Title _bean = new com.codename1.rad.ui.beans.Title(new com.codename1.rad.ui.ViewContext(context.getController(), context.getEntity()));
        {
            com.codename1.ui.Component _injectedValue = createComponent3();
            if (_injectedValue != null) _bean.setComponent((com.codename1.ui.Component)_injectedValue);
        }
        // 4 child nodes
        // Create child nodes
        // 4 child nodes
        return _bean;
    }
    @Override
    public void commit() {}
    @Override
    public void update() {}
    @Override
    public void activate() {
        super.activate();
    }
    private <T extends Node> T _setParent(Class<T> cls, T node) {
        node.setParent(getViewNode());
        return node;
    }
    private <T> T _getInjectedParameter(Class<T> type, ViewContext context, Controller controller) {
        T lookedUp = (T)controller.lookup(type);
        if (lookedUp != null) return lookedUp;
        if (type == ViewContext.class) return (T)context;
        if (Entity.class.isAssignableFrom(type)) return (T)context.getEntity();
        if (type.isAssignableFrom(this.getClass())) return (T)this;
        if (type.isAssignableFrom(controller.getClass())) return (T)controller;
        if (type.isAssignableFrom(FormController.class)) return (T)formController;
        if (type.isAssignableFrom(ApplicationController.class)) return (T)applicationController;
        if (type.isAssignableFrom(ViewController.class)) return (T)viewController;
        return null;
    }
    @Override
    protected void initComponent() {
        super.initComponent();
        if (__initOnceListeners != null && !__initOnceListeners.isEmpty()) {
            java.util.List<Runnable> toRun = new java.util.ArrayList<Runnable>(__initOnceListeners);
            __initOnceListeners = null;
            for (Runnable r : toRun) r.run();
        }
    }
    @Override
    protected void deinitialize() {
        if (__deinitListeners != null && !__deinitListeners.isEmpty()) {
            java.util.List<Runnable> toRun = new java.util.ArrayList<Runnable>(__deinitListeners);
            for (Runnable r : toRun) r.run();
        }
        super.deinitialize();
    }
    private void addInitOnceListener(Runnable r) {
        if (__initOnceListeners == null) __initOnceListeners = new java.util.ArrayList<>();
        __initOnceListeners.add(r);
    }
    private void addDeinitListener(Runnable r) {
        if (__deinitListeners == null) __deinitListeners = new java.util.ArrayList<>();
        __deinitListeners.add(r);
    }
    private void back() {
        com.codename1.rad.controllers.ActionSupport.dispatchEvent(new com.codename1.rad.controllers.FormController.FormBackEvent(this));
    }
}
