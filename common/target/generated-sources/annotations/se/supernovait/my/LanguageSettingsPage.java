package se.supernovait.my;
import com.codename1.rad.annotations.*;
import com.codename1.rad.controllers.*;
import se.supernovait.my.*;
import se.supernovait.my.services.SettingsService;
import se.supernovait.my.controllers.SettingsController;
import static com.codename1.rad.util.NonNull.nonNull;
import static com.codename1.rad.util.NonNull.nonNullEntries;
import com.codename1.ui.spinner.Picker;
import com.codename1.rad.schemas.*;
import com.codename1.rad.ui.builders.*;
import ca.weblite.shared.components.*;
import com.codename1.rad.models.*;
import com.codename1.rad.nodes.*;
import com.codename1.rad.ui.entityviews.*;
import com.codename1.rad.ui.beans.*;
import com.codename1.rad.propertyviews.*;
import com.codename1.ui.*;
import com.codename1.ui.plaf.*;
import com.codename1.components.*;
import static com.codename1.ui.CN.*;
import com.codename1.ui.layouts.*;
import com.codename1.rad.ui.ViewContext;
import com.codename1.rad.ui.EntityView;
@Autogenerated
public class LanguageSettingsPage extends AbstractLanguageSettingsPage<LanguageSettingsPageModel> implements LanguageSettingsPageSchema {
    private final ViewContext<LanguageSettingsPageModel> context;
    private final FormController formController;
    private final ApplicationController applicationController;
    private final AppSectionController sectionController;
    private final ViewController viewController;
    private final FormController parentFormController;
    private java.util.List<Runnable> __initOnceListeners;
    private java.util.List<Runnable> __deinitListeners;
    // Placeholder for the row model when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private com.codename1.rad.models.Entity rowModel;
    // Placeholder for the row index when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private int rowIndex;
    // Placeholder for the row selected state when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private boolean rowSelected;
    // Placeholder for the row focused state when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private boolean rowFocused;
    // Placeholder for the EntityListView when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private com.codename1.rad.ui.entityviews.EntityListView rowList;
    private EntityView view = this;
    private EntityView rowView;
    private ViewContext subContext;
    private Container _currentContainer;
    SettingsService settingsService;
    com.codename1.ui.RadioButton sv;
    com.codename1.ui.RadioButton en;
    private void script11(com.codename1.ui.Container it) {

        /* Add buttons to a ButtonGroup so only one can be selected at a time. */
        new ButtonGroup(sv, en);
        sv.setSelected(settingsService.isSelectedLanguage("sv"));
        en.setSelected(settingsService.isSelectedLanguage("en"));
    

    }
    private static ViewContext<LanguageSettingsPageModel> wrapContext(ViewContext<LanguageSettingsPageModel> context) {
        SettingsController _viewController = new SettingsController(context.getController());
        return _viewController.createViewContext(LanguageSettingsPageModel.class, context.getEntity());
    }

    private Component registerViewController(Component cmp) {
        this.context.getController().setView(cmp);        return this.context.getController().getView();
    }

    @Override
    public LanguageSettingsPageModel getEntity(){ return (LanguageSettingsPageModel)super.getEntity();}
    public LanguageSettingsPage(@Inject ViewContext<LanguageSettingsPageModel> context) {
        super(wrapContext(context));
        this.context = getContext();
        this.formController = this.context.getController().getFormController();
        this.viewController = this.context.getController();
        this.applicationController = this.context.getController().getApplicationController();
        this.sectionController = this.context.getController().getSectionController();
        this.parentFormController = (this.formController == null || this.formController.getParent() == null) ? null : this.formController.getParent().getFormController();
        getAllStyles().stripMarginAndPadding();
        setLayout(new BorderLayout());
        _currentContainer = this;
        add(BorderLayout.CENTER, registerViewController(createComponent0()));
    }
    private com.codename1.ui.Container createComponent0() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "0");
         attributes.put("uiid", "MyPage");
         attributes.put("view-controller", "SettingsController");
         attributes.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
         attributes.put("xsi:noNamespaceSchemaLocation", "LanguageSettingsPage.xsd");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "y", attributes);
        _builder.setParentContainer(_currentContainer, null);
        // uiid=MyPage
        
        // xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
        
        // xsi:noNamespaceSchemaLocation=LanguageSettingsPage.xsd
        
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // uiid=MyPage
        _cmp.setUIID("MyPage");
        // xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
        
        // xsi:noNamespaceSchemaLocation=LanguageSettingsPage.xsd
        
        // 13 child nodes
        settingsService=getContext().getController().lookup(SettingsService.class);
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 13 child nodes
        // Child tag import is type null
        // Child tag define-category is type null
        // Child tag title is type com.codename1.rad.ui.beans.Title
        // Create bean com.codename1.rad.ui.beans.Title
        createBean4();
        // Child tag y is type com.codename1.ui.Container
        // Add child component  with child tag y
        {
            com.codename1.ui.Component _childCmp = createComponent6();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // <script> tag
        script11(_cmp);
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Label createComponent5() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "5");
         attributes.put("text", "Language settings");
        com.codename1.ui.Label _cmp = new com.codename1.ui.Label();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label>(_cmp, context, "label", attributes);
        // text=Language settings
        _cmp.setText("Language settings");
        // 0 child nodes
        // Create child components
        // 0 child nodes
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Container createComponent6() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "6");
         attributes.put("uiid", "MySection");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "y", attributes);
        _builder.setParentContainer(_currentContainer, null);
        // uiid=MySection
        
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // uiid=MySection
        _cmp.setUIID("MySection");
        // 5 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 5 child nodes
        // Child tag radioButton is type com.codename1.ui.RadioButton
        // Add child component  with child tag radioButton
        {
            com.codename1.ui.Component _childCmp = createComponent7();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radioButton is type com.codename1.ui.RadioButton
        // Add child component  with child tag radioButton
        {
            com.codename1.ui.Component _childCmp = createComponent9();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.RadioButton createComponent7() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("name", "sv");
         attributes.put("rad-id", "7");
         attributes.put("rad-var", "sv");
         attributes.put("text", "Svenska");
         attributes.put("uiid", "MySettingsAction");
        com.codename1.ui.RadioButton _cmp = new com.codename1.ui.RadioButton();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.RadioButton> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.RadioButton>(_cmp, context, "radioButton", attributes);
        // uiid=MySettingsAction
        _cmp.setUIID("MySettingsAction");
        // name=sv
        _cmp.setName("sv");
        // text=Svenska
        _cmp.setText("Svenska");
        // 3 child nodes
        // Create child components
        // 3 child nodes
        // Child tag bind-action is type null
        // Set up bindings
        // Set up action Bindings
        {
            ActionNode __action = getViewNode().getInheritedAction(LANGUAGE);
            if (__action == null) _cmp.setVisible(false);
            else {
                com.codename1.ui.RadioButton _fcmp = _cmp;
                ActionNode _action = __action;
                com.codename1.rad.ui.DefaultActionViewFactory.initUI(_fcmp, context.getEntity(), _action);
                Runnable _onUpdate = () -> {
                    com.codename1.rad.ui.DefaultActionViewFactory.update(_fcmp, context.getEntity(), _action);
                };
                com.codename1.ui.events.ActionListener<PropertyChangeEvent> _pce = pcl -> {
                    _onUpdate.run();
                };
                Runnable _onBind = () -> {
                    context.getEntity().addPropertyChangeListener(_pce);
                };
                Runnable _onUnbind = () -> {
                    context.getEntity().removePropertyChangeListener(_pce);
                };
                addBindListener(_onBind);
                addUnbindListener(_onUnbind);
                if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                    ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
                } else {
                    addUpdateListener(_onUpdate);
                }
            }
        }
        sv = _cmp;
        return _cmp;
    }
    private com.codename1.ui.RadioButton createComponent9() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("name", "en");
         attributes.put("rad-id", "9");
         attributes.put("rad-var", "en");
         attributes.put("text", "English");
         attributes.put("uiid", "MySettingsAction");
        com.codename1.ui.RadioButton _cmp = new com.codename1.ui.RadioButton();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.RadioButton> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.RadioButton>(_cmp, context, "radioButton", attributes);
        // uiid=MySettingsAction
        _cmp.setUIID("MySettingsAction");
        // name=en
        _cmp.setName("en");
        // text=English
        _cmp.setText("English");
        // 3 child nodes
        // Create child components
        // 3 child nodes
        // Child tag bind-action is type null
        // Set up bindings
        // Set up action Bindings
        {
            ActionNode __action = getViewNode().getInheritedAction(LANGUAGE);
            if (__action == null) _cmp.setVisible(false);
            else {
                com.codename1.ui.RadioButton _fcmp = _cmp;
                ActionNode _action = __action;
                com.codename1.rad.ui.DefaultActionViewFactory.initUI(_fcmp, context.getEntity(), _action);
                Runnable _onUpdate = () -> {
                    com.codename1.rad.ui.DefaultActionViewFactory.update(_fcmp, context.getEntity(), _action);
                };
                com.codename1.ui.events.ActionListener<PropertyChangeEvent> _pce = pcl -> {
                    _onUpdate.run();
                };
                Runnable _onBind = () -> {
                    context.getEntity().addPropertyChangeListener(_pce);
                };
                Runnable _onUnbind = () -> {
                    context.getEntity().removePropertyChangeListener(_pce);
                };
                addBindListener(_onBind);
                addUnbindListener(_onUnbind);
                if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                    ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
                } else {
                    addUpdateListener(_onUpdate);
                }
            }
        }
        en = _cmp;
        return _cmp;
    }
    private com.codename1.rad.ui.beans.Title createBean4() {
        com.codename1.rad.ui.beans.Title _bean = new com.codename1.rad.ui.beans.Title(new com.codename1.rad.ui.ViewContext(context.getController(), context.getEntity()));
        {
            com.codename1.ui.Component _injectedValue = createComponent5();
            if (_injectedValue != null) _bean.setComponent((com.codename1.ui.Component)_injectedValue);
        }
        // 4 child nodes
        // Create child nodes
        // 4 child nodes
        return _bean;
    }
    @Override
    public void commit() {}
    @Override
    public void update() {}
    @Override
    public void activate() {
        super.activate();
    }
    private <T extends Node> T _setParent(Class<T> cls, T node) {
        node.setParent(getViewNode());
        return node;
    }
    private <T> T _getInjectedParameter(Class<T> type, ViewContext context, Controller controller) {
        T lookedUp = (T)controller.lookup(type);
        if (lookedUp != null) return lookedUp;
        if (type == ViewContext.class) return (T)context;
        if (Entity.class.isAssignableFrom(type)) return (T)context.getEntity();
        if (type.isAssignableFrom(this.getClass())) return (T)this;
        if (type.isAssignableFrom(controller.getClass())) return (T)controller;
        if (type.isAssignableFrom(FormController.class)) return (T)formController;
        if (type.isAssignableFrom(ApplicationController.class)) return (T)applicationController;
        if (type.isAssignableFrom(ViewController.class)) return (T)viewController;
        return null;
    }
    @Override
    protected void initComponent() {
        super.initComponent();
        if (__initOnceListeners != null && !__initOnceListeners.isEmpty()) {
            java.util.List<Runnable> toRun = new java.util.ArrayList<Runnable>(__initOnceListeners);
            __initOnceListeners = null;
            for (Runnable r : toRun) r.run();
        }
    }
    @Override
    protected void deinitialize() {
        if (__deinitListeners != null && !__deinitListeners.isEmpty()) {
            java.util.List<Runnable> toRun = new java.util.ArrayList<Runnable>(__deinitListeners);
            for (Runnable r : toRun) r.run();
        }
        super.deinitialize();
    }
    private void addInitOnceListener(Runnable r) {
        if (__initOnceListeners == null) __initOnceListeners = new java.util.ArrayList<>();
        __initOnceListeners.add(r);
    }
    private void addDeinitListener(Runnable r) {
        if (__deinitListeners == null) __deinitListeners = new java.util.ArrayList<>();
        __deinitListeners.add(r);
    }
    private void back() {
        com.codename1.rad.controllers.ActionSupport.dispatchEvent(new com.codename1.rad.controllers.FormController.FormBackEvent(this));
    }
}
