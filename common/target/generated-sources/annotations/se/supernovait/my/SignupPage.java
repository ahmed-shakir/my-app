package se.supernovait.my;
import com.codename1.rad.annotations.*;
import com.codename1.rad.controllers.*;
import se.supernovait.my.*;
import static com.codename1.rad.util.NonNull.nonNull;
import static com.codename1.rad.util.NonNull.nonNullEntries;
import com.codename1.ui.spinner.Picker;
import com.codename1.rad.schemas.*;
import com.codename1.rad.ui.builders.*;
import ca.weblite.shared.components.*;
import com.codename1.rad.models.*;
import com.codename1.rad.nodes.*;
import com.codename1.rad.ui.entityviews.*;
import com.codename1.rad.ui.beans.*;
import com.codename1.rad.propertyviews.*;
import com.codename1.ui.*;
import com.codename1.ui.plaf.*;
import com.codename1.components.*;
import static com.codename1.ui.CN.*;
import com.codename1.ui.layouts.*;
import com.codename1.rad.ui.ViewContext;
import com.codename1.rad.ui.EntityView;
@Autogenerated
public class SignupPage extends AbstractSignupPage<SignupPageModel> implements SignupPageSchema {
    private final ViewContext<SignupPageModel> context;
    private final FormController formController;
    private final ApplicationController applicationController;
    private final AppSectionController sectionController;
    private final ViewController viewController;
    private final FormController parentFormController;
    private java.util.List<Runnable> __initOnceListeners;
    private java.util.List<Runnable> __deinitListeners;
    // Placeholder for the row model when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private com.codename1.rad.models.Entity rowModel;
    // Placeholder for the row index when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private int rowIndex;
    // Placeholder for the row selected state when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private boolean rowSelected;
    // Placeholder for the row focused state when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private boolean rowFocused;
    // Placeholder for the EntityListView when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private com.codename1.rad.ui.entityviews.EntityListView rowList;
    private EntityView view = this;
    private EntityView rowView;
    private ViewContext subContext;
    private Container _currentContainer;
    com.codename1.rad.propertyviews.TextFieldPropertyView phoneTextField;
    com.codename1.rad.propertyviews.TextFieldPropertyView emailTextField;
    private void script32(com.codename1.ui.Button it) {

        it.addActionListener(e -> {
        e.consume();
        it.getComponentForm().setFormBottomPaddingEditingMode(true);
        new com.codename1.rad.models.PropertySelector(context.getEntity(), editingPhoneOrEmail).setBoolean(true);
        if (new com.codename1.rad.models.PropertySelector(context.getEntity(), useEmail).getBoolean(false)) {
        emailTextField.getComponent().startEditingAsync();
        } else {
        phoneTextField.getComponent().startEditingAsync();
        }
        });
            

    }
    private void script44(com.codename1.ui.Button it) {

        it.addActionListener(e -> {
            new com.codename1.rad.models.PropertySelector(context.getEntity(), useEmail).setBoolean(true);
            emailTextField.getComponent().startEditingAsync();
        });
                

    }
    private void script46(com.codename1.ui.Button it) {

        it.addActionListener(e -> {
            new com.codename1.rad.models.PropertySelector(context.getEntity(), useEmail).setBoolean(false);
            phoneTextField.getComponent().startEditingAsync();
        });
                

    }
    private static ViewContext<SignupPageModel> wrapContext(ViewContext<SignupPageModel> context) {
        se.supernovait.my.controllers.SignupController _viewController = new se.supernovait.my.controllers.SignupController(context.getController());
        return _viewController.createViewContext(SignupPageModel.class, context.getEntity());
    }

    private Component registerViewController(Component cmp) {
        this.context.getController().setView(cmp);        return this.context.getController().getView();
    }

    @Override
    public SignupPageModel getEntity(){ return (SignupPageModel)super.getEntity();}
    public SignupPage(@Inject ViewContext<SignupPageModel> context) {
        super(wrapContext(context));
        this.context = getContext();
        this.formController = this.context.getController().getFormController();
        this.viewController = this.context.getController();
        this.applicationController = this.context.getController().getApplicationController();
        this.sectionController = this.context.getController().getSectionController();
        this.parentFormController = (this.formController == null || this.formController.getParent() == null) ? null : this.formController.getParent().getFormController();
        getAllStyles().stripMarginAndPadding();
        setLayout(new BorderLayout());
        _currentContainer = this;
        add(BorderLayout.CENTER, registerViewController(createComponent0()));
    }
    private com.codename1.ui.Container createComponent0() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "0");
         attributes.put("safeArea", "true");
         attributes.put("view-controller", "se.supernovait.my.controllers.SignupController");
         attributes.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
         attributes.put("xsi:noNamespaceSchemaLocation", "SignupPage.xsd");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "border", attributes);
        _builder.setParentContainer(_currentContainer, null);
        // safeArea=true
        
        // xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
        
        // xsi:noNamespaceSchemaLocation=SignupPage.xsd
        
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // safeArea=true
        _cmp.setSafeArea(true);
        // xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
        
        // xsi:noNamespaceSchemaLocation=SignupPage.xsd
        
        // 55 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 55 child nodes
        // Child tag define-category is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag define-tag is type null
        // Child tag title is type com.codename1.rad.ui.beans.Title
        // Create bean com.codename1.rad.ui.beans.Title
        createBean19();
        // Child tag y is type com.codename1.ui.Container
        // Add child component  with child tag y
        _cmp.addComponent(_builder.parseConstraint("center"), createComponent21());
        // Child tag border is type com.codename1.ui.Container
        // Add child component  with child tag border
        _cmp.addComponent(_builder.parseConstraint("south"), createComponent41());
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Label createComponent20() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("fontIcon", "(char)0xe900");
         attributes.put("iconUIID", "SupernovaIcon");
         attributes.put("rad-id", "20");
        com.codename1.ui.Label _cmp = new com.codename1.ui.Label();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label>(_cmp, context, "label", attributes);
        // iconUIID=SupernovaIcon
        _cmp.setIconUIID("SupernovaIcon");
        // fontIcon=(char)0xe900
        _cmp.setFontIcon((char)0xe900);
        // 0 child nodes
        // Create child components
        // 0 child nodes
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Container createComponent21() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("layout-constraint", "center");
         attributes.put("rad-id", "21");
         attributes.put("uiid", "SignupPageContent");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "y", attributes);
        _builder.setParentContainer(_currentContainer, null);
        // uiid=SignupPageContent
        
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // uiid=SignupPageContent
        _cmp.setUIID("SignupPageContent");
        // 33 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 33 child nodes
        // Child tag label is type com.codename1.ui.Label
        // Add child component  with child tag label
        {
            com.codename1.ui.Component _childCmp = createComponent22();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radTextField is type com.codename1.rad.propertyviews.TextFieldPropertyView
        // Add child component  with child tag radTextField
        {
            com.codename1.ui.Component _childCmp = createComponent23();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radLabel is type com.codename1.rad.propertyviews.LabelPropertyView
        // Add child component  with child tag radLabel
        {
            com.codename1.ui.Component _childCmp = createComponent24();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radTextField is type com.codename1.rad.propertyviews.TextFieldPropertyView
        // Add child component  with child tag radTextField
        {
            com.codename1.ui.Component _childCmp = createComponent25();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radLabel is type com.codename1.rad.propertyviews.LabelPropertyView
        // Add child component  with child tag radLabel
        {
            com.codename1.ui.Component _childCmp = createComponent26();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radTextField is type com.codename1.rad.propertyviews.TextFieldPropertyView
        // Add child component  with child tag radTextField
        {
            com.codename1.ui.Component _childCmp = createComponent27();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radLabel is type com.codename1.rad.propertyviews.LabelPropertyView
        // Add child component  with child tag radLabel
        {
            com.codename1.ui.Component _childCmp = createComponent28();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radTextField is type com.codename1.rad.propertyviews.TextFieldPropertyView
        // Add child component  with child tag radTextField
        {
            com.codename1.ui.Component _childCmp = createComponent29();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radLabel is type com.codename1.rad.propertyviews.LabelPropertyView
        // Add child component  with child tag radLabel
        {
            com.codename1.ui.Component _childCmp = createComponent30();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag button is type com.codename1.ui.Button
        // Add child component  with child tag button
        {
            com.codename1.ui.Component _childCmp = createComponent31();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radTextField is type com.codename1.rad.propertyviews.TextFieldPropertyView
        // Add child component  with child tag radTextField
        {
            com.codename1.ui.Component _childCmp = createComponent33();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radTextField is type com.codename1.rad.propertyviews.TextFieldPropertyView
        // Add child component  with child tag radTextField
        {
            com.codename1.ui.Component _childCmp = createComponent34();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radLabel is type com.codename1.rad.propertyviews.LabelPropertyView
        // Add child component  with child tag radLabel
        {
            com.codename1.ui.Component _childCmp = createComponent35();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radDatePicker is type com.codename1.rad.propertyviews.PickerPropertyView
        // Add child component  with child tag radDatePicker
        {
            com.codename1.ui.Component _childCmp = createComponent36();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag radLabel is type com.codename1.rad.propertyviews.LabelPropertyView
        // Add child component  with child tag radLabel
        {
            com.codename1.ui.Component _childCmp = createComponent37();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag flow is type com.codename1.ui.Container
        // Add child component  with child tag flow
        {
            com.codename1.ui.Component _childCmp = createComponent38();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Label createComponent22() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "22");
         attributes.put("uiid", "SignupPageTitle");
        com.codename1.ui.Label _cmp = new com.codename1.ui.Label();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label>(_cmp, context, "label", attributes);
        _cmp.setText("Create your account");        // uiid=SignupPageTitle
        _cmp.setUIID("SignupPageTitle");
        // 1 child nodes
        // Create child components
        // 1 child nodes
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.TextFieldPropertyView createComponent23() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("component.hint", "Firstname");
         attributes.put("rad-id", "23");
         attributes.put("tag", "firstname");
        com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder(context, "radTextField", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.TextField _injectedValue = null;
            if (_injectedValue != null) _builder.textField((com.codename1.ui.TextField)_injectedValue);
        }
        // component.hint=Firstname
        
        // tag=firstname
        _builder.tag(firstname);
        com.codename1.rad.propertyviews.TextFieldPropertyView _cmp = (com.codename1.rad.propertyviews.TextFieldPropertyView)_builder.getComponent();
        // component.hint=Firstname
        {com.codename1.ui.TextField __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.TextField)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setHint("Firstname");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.LabelPropertyView createComponent24() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-hidden", "${firstnameErrorMessage}.isEmpty()");
         attributes.put("component.uiid", "FieldErrorMessage");
         attributes.put("rad-id", "24");
         attributes.put("rad-transition", "hidden 0.3s");
         attributes.put("tag", "firstnameErrorMessage");
        com.codename1.rad.ui.builders.LabelPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.LabelPropertyViewBuilder(context, "radLabel", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.Label _injectedValue = null;
            if (_injectedValue != null) _builder.label((com.codename1.ui.Label)_injectedValue);
        }
        // component.uiid=FieldErrorMessage
        
        // tag=firstnameErrorMessage
        _builder.tag(firstnameErrorMessage);
        com.codename1.rad.propertyviews.LabelPropertyView _cmp = (com.codename1.rad.propertyviews.LabelPropertyView)_builder.getComponent();
        // hidden=${firstnameErrorMessage}.isEmpty()
        _cmp.setHidden(new com.codename1.rad.models.PropertySelector(context.getEntity(), firstnameErrorMessage).isEmpty());
        // component.uiid=FieldErrorMessage
        {com.codename1.ui.Label __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.Label)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setUIID("FieldErrorMessage");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        {
            // Binding for bind-hidden=${firstnameErrorMessage}.isEmpty()
            final com.codename1.rad.propertyviews.LabelPropertyView _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isHidden();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = new com.codename1.rad.models.PropertySelector(context.getEntity(), firstnameErrorMessage).isEmpty();
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setHidden(_newVal);
                        _fcmp.getParent().animateLayout(300);

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-hidden
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.TextFieldPropertyView createComponent25() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("component.hint", "Lastname");
         attributes.put("rad-id", "25");
         attributes.put("tag", "lastname");
        com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder(context, "radTextField", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.TextField _injectedValue = null;
            if (_injectedValue != null) _builder.textField((com.codename1.ui.TextField)_injectedValue);
        }
        // component.hint=Lastname
        
        // tag=lastname
        _builder.tag(lastname);
        com.codename1.rad.propertyviews.TextFieldPropertyView _cmp = (com.codename1.rad.propertyviews.TextFieldPropertyView)_builder.getComponent();
        // component.hint=Lastname
        {com.codename1.ui.TextField __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.TextField)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setHint("Lastname");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.LabelPropertyView createComponent26() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-hidden", "${lastnameErrorMessage}.isEmpty()");
         attributes.put("component.uiid", "FieldErrorMessage");
         attributes.put("rad-id", "26");
         attributes.put("rad-transition", "hidden 0.3s");
         attributes.put("tag", "lastnameErrorMessage");
        com.codename1.rad.ui.builders.LabelPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.LabelPropertyViewBuilder(context, "radLabel", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.Label _injectedValue = null;
            if (_injectedValue != null) _builder.label((com.codename1.ui.Label)_injectedValue);
        }
        // component.uiid=FieldErrorMessage
        
        // tag=lastnameErrorMessage
        _builder.tag(lastnameErrorMessage);
        com.codename1.rad.propertyviews.LabelPropertyView _cmp = (com.codename1.rad.propertyviews.LabelPropertyView)_builder.getComponent();
        // hidden=${lastnameErrorMessage}.isEmpty()
        _cmp.setHidden(new com.codename1.rad.models.PropertySelector(context.getEntity(), lastnameErrorMessage).isEmpty());
        // component.uiid=FieldErrorMessage
        {com.codename1.ui.Label __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.Label)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setUIID("FieldErrorMessage");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        {
            // Binding for bind-hidden=${lastnameErrorMessage}.isEmpty()
            final com.codename1.rad.propertyviews.LabelPropertyView _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isHidden();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = new com.codename1.rad.models.PropertySelector(context.getEntity(), lastnameErrorMessage).isEmpty();
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setHidden(_newVal);
                        _fcmp.getParent().animateLayout(300);

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-hidden
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.TextFieldPropertyView createComponent27() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("component.hint", "Person ID (SSN)");
         attributes.put("rad-id", "27");
         attributes.put("tag", "personId");
        com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder(context, "radTextField", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.TextField _injectedValue = null;
            if (_injectedValue != null) _builder.textField((com.codename1.ui.TextField)_injectedValue);
        }
        // component.hint=Person ID (SSN)
        
        // tag=personId
        _builder.tag(personId);
        com.codename1.rad.propertyviews.TextFieldPropertyView _cmp = (com.codename1.rad.propertyviews.TextFieldPropertyView)_builder.getComponent();
        // component.hint=Person ID (SSN)
        {com.codename1.ui.TextField __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.TextField)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setHint("Person ID (SSN)");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.LabelPropertyView createComponent28() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-hidden", "${personIdErrorMessage}.isEmpty()");
         attributes.put("component.uiid", "FieldErrorMessage");
         attributes.put("rad-id", "28");
         attributes.put("rad-transition", "hidden 0.3s");
         attributes.put("tag", "personIdErrorMessage");
        com.codename1.rad.ui.builders.LabelPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.LabelPropertyViewBuilder(context, "radLabel", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.Label _injectedValue = null;
            if (_injectedValue != null) _builder.label((com.codename1.ui.Label)_injectedValue);
        }
        // component.uiid=FieldErrorMessage
        
        // tag=personIdErrorMessage
        _builder.tag(personIdErrorMessage);
        com.codename1.rad.propertyviews.LabelPropertyView _cmp = (com.codename1.rad.propertyviews.LabelPropertyView)_builder.getComponent();
        // hidden=${personIdErrorMessage}.isEmpty()
        _cmp.setHidden(new com.codename1.rad.models.PropertySelector(context.getEntity(), personIdErrorMessage).isEmpty());
        // component.uiid=FieldErrorMessage
        {com.codename1.ui.Label __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.Label)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setUIID("FieldErrorMessage");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        {
            // Binding for bind-hidden=${personIdErrorMessage}.isEmpty()
            final com.codename1.rad.propertyviews.LabelPropertyView _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isHidden();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = new com.codename1.rad.models.PropertySelector(context.getEntity(), personIdErrorMessage).isEmpty();
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setHidden(_newVal);
                        _fcmp.getParent().animateLayout(300);

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-hidden
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.TextFieldPropertyView createComponent29() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("component.hint", "Username");
         attributes.put("rad-id", "29");
         attributes.put("tag", "username");
        com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder(context, "radTextField", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.TextField _injectedValue = null;
            if (_injectedValue != null) _builder.textField((com.codename1.ui.TextField)_injectedValue);
        }
        // component.hint=Username
        
        // tag=username
        _builder.tag(username);
        com.codename1.rad.propertyviews.TextFieldPropertyView _cmp = (com.codename1.rad.propertyviews.TextFieldPropertyView)_builder.getComponent();
        // component.hint=Username
        {com.codename1.ui.TextField __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.TextField)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setHint("Username");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.LabelPropertyView createComponent30() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-hidden", "${usernameErrorMessage}.isEmpty()");
         attributes.put("component.uiid", "FieldErrorMessage");
         attributes.put("rad-id", "30");
         attributes.put("rad-transition", "hidden 0.3s");
         attributes.put("tag", "usernameErrorMessage");
        com.codename1.rad.ui.builders.LabelPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.LabelPropertyViewBuilder(context, "radLabel", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.Label _injectedValue = null;
            if (_injectedValue != null) _builder.label((com.codename1.ui.Label)_injectedValue);
        }
        // component.uiid=FieldErrorMessage
        
        // tag=usernameErrorMessage
        _builder.tag(usernameErrorMessage);
        com.codename1.rad.propertyviews.LabelPropertyView _cmp = (com.codename1.rad.propertyviews.LabelPropertyView)_builder.getComponent();
        // hidden=${usernameErrorMessage}.isEmpty()
        _cmp.setHidden(new com.codename1.rad.models.PropertySelector(context.getEntity(), usernameErrorMessage).isEmpty());
        // component.uiid=FieldErrorMessage
        {com.codename1.ui.Label __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.Label)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setUIID("FieldErrorMessage");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        {
            // Binding for bind-hidden=${usernameErrorMessage}.isEmpty()
            final com.codename1.rad.propertyviews.LabelPropertyView _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isHidden();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = new com.codename1.rad.models.PropertySelector(context.getEntity(), usernameErrorMessage).isEmpty();
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setHidden(_newVal);
                        _fcmp.getParent().animateLayout(300);

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-hidden
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Button createComponent31() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-hidden", "${editingPhoneOrEmail}.bool");
         attributes.put("rad-id", "31");
         attributes.put("text", "Phone number or email address");
         attributes.put("uiid", "PhoneOrEmailButton");
        com.codename1.ui.Button _cmp = new com.codename1.ui.Button();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button>(_cmp, context, "button", attributes);
        // uiid=PhoneOrEmailButton
        _cmp.setUIID("PhoneOrEmailButton");
        // hidden=${editingPhoneOrEmail}.bool
        _cmp.setHidden(new com.codename1.rad.models.PropertySelector(context.getEntity(), editingPhoneOrEmail).getBoolean(false));
        // text=Phone number or email address
        _cmp.setText("Phone number or email address");
        // 3 child nodes
        // Create child components
        // 3 child nodes
        // <script> tag
        script32(_cmp);
        // Set up bindings
        {
            // Binding for bind-hidden=${editingPhoneOrEmail}.bool
            final com.codename1.ui.Button _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isHidden();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = new com.codename1.rad.models.PropertySelector(context.getEntity(), editingPhoneOrEmail).getBoolean(false);
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setHidden(_newVal);
                        revalidateLater();

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-hidden
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.TextFieldPropertyView createComponent33() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-component.focus", "phoneFieldFocused");
         attributes.put("bind-hidden", "${useEmail}.bool || !${editingPhoneOrEmail}.bool");
         attributes.put("component.constraint", "TextArea.PHONENUMBER");
         attributes.put("component.hint", "Phone number");
         attributes.put("rad-id", "33");
         attributes.put("rad-var", "phoneTextField");
         attributes.put("tag", "phone");
        com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder(context, "radTextField", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.TextField _injectedValue = null;
            if (_injectedValue != null) _builder.textField((com.codename1.ui.TextField)_injectedValue);
        }
        // component.constraint=TextArea.PHONENUMBER
        
        // component.hint=Phone number
        
        // tag=phone
        _builder.tag(phone);
        com.codename1.rad.propertyviews.TextFieldPropertyView _cmp = (com.codename1.rad.propertyviews.TextFieldPropertyView)_builder.getComponent();
        // hidden=${useEmail}.bool || !${editingPhoneOrEmail}.bool
        _cmp.setHidden(new com.codename1.rad.models.PropertySelector(context.getEntity(), useEmail).getBoolean(false) || !new com.codename1.rad.models.PropertySelector(context.getEntity(), editingPhoneOrEmail).getBoolean(false));
        // component.constraint=TextArea.PHONENUMBER
        {com.codename1.ui.TextField __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.TextField)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setConstraint(TextArea.PHONENUMBER);}
        // component.hint=Phone number
        {com.codename1.ui.TextField __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.TextField)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setHint("Phone number");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        {
            // Binding for bind-component.focus=phoneFieldFocused
            com.codename1.ui.TextField _tmpCmp = null;
{Object __tmp__tmpCmp=_cmp.getComponent();_tmpCmp=(__tmp__tmpCmp==null)?null:(com.codename1.ui.TextField)__tmp__tmpCmp;}
            if (_tmpCmp != null) {
                PropertySelector _propertySelector = new PropertySelector(context.getEntity(), phoneFieldFocused);
                com.codename1.rad.ui.builders.ComponentBinder.bindFocus(this, _propertySelector, _tmpCmp);
            }
        }
        {
            // Binding for bind-hidden=${useEmail}.bool || !${editingPhoneOrEmail}.bool
            final com.codename1.rad.propertyviews.TextFieldPropertyView _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isHidden();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = new com.codename1.rad.models.PropertySelector(context.getEntity(), useEmail).getBoolean(false) || !new com.codename1.rad.models.PropertySelector(context.getEntity(), editingPhoneOrEmail).getBoolean(false);
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setHidden(_newVal);
                        revalidateLater();

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-hidden
        // Set up action Bindings
        phoneTextField = _cmp;
        return _cmp;
    }
    private com.codename1.rad.propertyviews.TextFieldPropertyView createComponent34() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-component.focus", "emailFieldFocused");
         attributes.put("bind-hidden", "!${useEmail}.bool || !${editingPhoneOrEmail}.bool");
         attributes.put("component.constraint", "TextArea.EMAILADDR");
         attributes.put("component.hint", "Email address");
         attributes.put("rad-id", "34");
         attributes.put("rad-var", "emailTextField");
         attributes.put("tag", "email");
        com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.TextFieldPropertyViewBuilder(context, "radTextField", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.TextField _injectedValue = null;
            if (_injectedValue != null) _builder.textField((com.codename1.ui.TextField)_injectedValue);
        }
        // component.constraint=TextArea.EMAILADDR
        
        // component.hint=Email address
        
        // tag=email
        _builder.tag(email);
        com.codename1.rad.propertyviews.TextFieldPropertyView _cmp = (com.codename1.rad.propertyviews.TextFieldPropertyView)_builder.getComponent();
        // hidden=!${useEmail}.bool || !${editingPhoneOrEmail}.bool
        _cmp.setHidden(!new com.codename1.rad.models.PropertySelector(context.getEntity(), useEmail).getBoolean(false) || !new com.codename1.rad.models.PropertySelector(context.getEntity(), editingPhoneOrEmail).getBoolean(false));
        // component.constraint=TextArea.EMAILADDR
        {com.codename1.ui.TextField __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.TextField)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setConstraint(TextArea.EMAILADDR);}
        // component.hint=Email address
        {com.codename1.ui.TextField __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.TextField)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setHint("Email address");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        {
            // Binding for bind-component.focus=emailFieldFocused
            com.codename1.ui.TextField _tmpCmp = null;
{Object __tmp__tmpCmp=_cmp.getComponent();_tmpCmp=(__tmp__tmpCmp==null)?null:(com.codename1.ui.TextField)__tmp__tmpCmp;}
            if (_tmpCmp != null) {
                PropertySelector _propertySelector = new PropertySelector(context.getEntity(), emailFieldFocused);
                com.codename1.rad.ui.builders.ComponentBinder.bindFocus(this, _propertySelector, _tmpCmp);
            }
        }
        {
            // Binding for bind-hidden=!${useEmail}.bool || !${editingPhoneOrEmail}.bool
            final com.codename1.rad.propertyviews.TextFieldPropertyView _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isHidden();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = !new com.codename1.rad.models.PropertySelector(context.getEntity(), useEmail).getBoolean(false) || !new com.codename1.rad.models.PropertySelector(context.getEntity(), editingPhoneOrEmail).getBoolean(false);
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setHidden(_newVal);
                        revalidateLater();

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-hidden
        // Set up action Bindings
        emailTextField = _cmp;
        return _cmp;
    }
    private com.codename1.rad.propertyviews.LabelPropertyView createComponent35() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-hidden", "${phoneOrEmailErrorMessage}.isEmpty()");
         attributes.put("component.uiid", "FieldErrorMessage");
         attributes.put("rad-id", "35");
         attributes.put("rad-transition", "hidden 0.3s");
         attributes.put("tag", "phoneOrEmailErrorMessage");
        com.codename1.rad.ui.builders.LabelPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.LabelPropertyViewBuilder(context, "radLabel", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.Label _injectedValue = null;
            if (_injectedValue != null) _builder.label((com.codename1.ui.Label)_injectedValue);
        }
        // component.uiid=FieldErrorMessage
        
        // tag=phoneOrEmailErrorMessage
        _builder.tag(phoneOrEmailErrorMessage);
        com.codename1.rad.propertyviews.LabelPropertyView _cmp = (com.codename1.rad.propertyviews.LabelPropertyView)_builder.getComponent();
        // hidden=${phoneOrEmailErrorMessage}.isEmpty()
        _cmp.setHidden(new com.codename1.rad.models.PropertySelector(context.getEntity(), phoneOrEmailErrorMessage).isEmpty());
        // component.uiid=FieldErrorMessage
        {com.codename1.ui.Label __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.Label)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setUIID("FieldErrorMessage");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        {
            // Binding for bind-hidden=${phoneOrEmailErrorMessage}.isEmpty()
            final com.codename1.rad.propertyviews.LabelPropertyView _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isHidden();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = new com.codename1.rad.models.PropertySelector(context.getEntity(), phoneOrEmailErrorMessage).isEmpty();
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setHidden(_newVal);
                        _fcmp.getParent().animateLayout(300);

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-hidden
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.PickerPropertyView createComponent36() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("component.text", "Date of birth");
         attributes.put("rad-id", "36");
         attributes.put("tag", "birthDate");
        com.codename1.rad.ui.builders.PickerPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.PickerPropertyViewBuilder(context, "radDatePicker", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.spinner.Picker _injectedValue = null;
            if (_injectedValue != null) _builder.picker((com.codename1.ui.spinner.Picker)_injectedValue);
        }
        // component.text=Date of birth
        
        // tag=birthDate
        _builder.tag(birthDate);
        com.codename1.rad.propertyviews.PickerPropertyView _cmp = (com.codename1.rad.propertyviews.PickerPropertyView)_builder.getComponent();
        // component.text=Date of birth
        {com.codename1.ui.spinner.Picker __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.spinner.Picker)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setText("Date of birth");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.propertyviews.LabelPropertyView createComponent37() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-hidden", "${birthDateErrorMessage}.isEmpty()");
         attributes.put("component.uiid", "FieldErrorMessage");
         attributes.put("rad-id", "37");
         attributes.put("rad-transition", "hidden 0.3s");
         attributes.put("tag", "birthDateErrorMessage");
        com.codename1.rad.ui.builders.LabelPropertyViewBuilder _builder = new com.codename1.rad.ui.builders.LabelPropertyViewBuilder(context, "radLabel", attributes);
        _builder.setParentContainer(_currentContainer, null);
        {
            com.codename1.ui.Label _injectedValue = null;
            if (_injectedValue != null) _builder.label((com.codename1.ui.Label)_injectedValue);
        }
        // component.uiid=FieldErrorMessage
        
        // tag=birthDateErrorMessage
        _builder.tag(birthDateErrorMessage);
        com.codename1.rad.propertyviews.LabelPropertyView _cmp = (com.codename1.rad.propertyviews.LabelPropertyView)_builder.getComponent();
        // hidden=${birthDateErrorMessage}.isEmpty()
        _cmp.setHidden(new com.codename1.rad.models.PropertySelector(context.getEntity(), birthDateErrorMessage).isEmpty());
        // component.uiid=FieldErrorMessage
        {com.codename1.ui.Label __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getComponent();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.Label)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setUIID("FieldErrorMessage");}
        // 0 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 0 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        {
            // Binding for bind-hidden=${birthDateErrorMessage}.isEmpty()
            final com.codename1.rad.propertyviews.LabelPropertyView _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isHidden();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = new com.codename1.rad.models.PropertySelector(context.getEntity(), birthDateErrorMessage).isEmpty();
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setHidden(_newVal);
                        _fcmp.getParent().animateLayout(300);

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-hidden
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Container createComponent38() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "38");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "flow", attributes);
        _builder.setParentContainer(_currentContainer, null);
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // 5 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 5 child nodes
        // Child tag label is type com.codename1.ui.Label
        // Add child component  with child tag label
        {
            com.codename1.ui.Component _childCmp = createComponent39();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag button is type com.codename1.ui.Button
        // Add child component  with child tag button
        {
            com.codename1.ui.Component _childCmp = createComponent40();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Label createComponent39() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "39");
         attributes.put("uiid", "SmallLabel");
        com.codename1.ui.Label _cmp = new com.codename1.ui.Label();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Label>(_cmp, context, "label", attributes);
        _cmp.setText("Have an account already?");        // uiid=SmallLabel
        _cmp.setUIID("SmallLabel");
        // 1 child nodes
        // Create child components
        // 1 child nodes
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Button createComponent40() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-href", "#LoginPage");
         attributes.put("rad-id", "40");
         attributes.put("uiid", "SmallLink");
        com.codename1.ui.Button _cmp = new com.codename1.ui.Button();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button>(_cmp, context, "button", attributes);
        _cmp.setText("Log in");        // uiid=SmallLink
        _cmp.setUIID("SmallLink");
        // 1 child nodes
        // Create child components
        // 1 child nodes
        // Set up bindings
        // Set up action Bindings
        _cmp.addActionListener(event -> {
            if (event.isConsumed()) return;
        com.codename1.rad.controllers.FormController _rad_href_controller = (com.codename1.rad.controllers.FormController)getContext().getController().createObjectWithFactory(se.supernovait.my.ILoginPageController.class, new Object[]{formController});
        if (_rad_href_controller == null) {
            _rad_href_controller = new se.supernovait.my.LoginPageController(formController);
        }
        _rad_href_controller.show();
        });
        return _cmp;
    }
    private com.codename1.ui.Container createComponent41() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("layout-constraint", "south");
         attributes.put("rad-id", "41");
         attributes.put("uiid", "SignupPageSouth");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "border", attributes);
        _builder.setParentContainer(_currentContainer, null);
        // uiid=SignupPageSouth
        
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // uiid=SignupPageSouth
        _cmp.setUIID("SignupPageSouth");
        // 5 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 5 child nodes
        // Child tag x is type com.codename1.ui.Container
        // Add child component  with child tag x
        _cmp.addComponent(_builder.parseConstraint("west"), createComponent42());
        // Child tag x is type com.codename1.ui.Container
        // Add child component  with child tag x
        _cmp.addComponent(_builder.parseConstraint("east"), createComponent47());
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Container createComponent42() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("layout-constraint", "west");
         attributes.put("rad-id", "42");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "x", attributes);
        _builder.setParentContainer(_currentContainer, null);
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // 5 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 5 child nodes
        // Child tag button is type com.codename1.ui.Button
        // Add child component  with child tag button
        {
            com.codename1.ui.Component _childCmp = createComponent43();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag button is type com.codename1.ui.Button
        // Add child component  with child tag button
        {
            com.codename1.ui.Component _childCmp = createComponent45();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Button createComponent43() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-hidden", "!${phoneFieldFocused}.bool");
         attributes.put("rad-id", "43");
         attributes.put("text", "Use Email Address");
        com.codename1.ui.Button _cmp = new com.codename1.ui.Button();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button>(_cmp, context, "button", attributes);
        // hidden=!${phoneFieldFocused}.bool
        _cmp.setHidden(!new com.codename1.rad.models.PropertySelector(context.getEntity(), phoneFieldFocused).getBoolean(false));
        // text=Use Email Address
        _cmp.setText("Use Email Address");
        // 3 child nodes
        // Create child components
        // 3 child nodes
        // <script> tag
        script44(_cmp);
        // Set up bindings
        {
            // Binding for bind-hidden=!${phoneFieldFocused}.bool
            final com.codename1.ui.Button _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isHidden();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = !new com.codename1.rad.models.PropertySelector(context.getEntity(), phoneFieldFocused).getBoolean(false);
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setHidden(_newVal);
                        revalidateLater();

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-hidden
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Button createComponent45() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("bind-hidden", "!${emailFieldFocused}.bool");
         attributes.put("rad-id", "45");
         attributes.put("text", "Use Phone");
        com.codename1.ui.Button _cmp = new com.codename1.ui.Button();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button>(_cmp, context, "button", attributes);
        // hidden=!${emailFieldFocused}.bool
        _cmp.setHidden(!new com.codename1.rad.models.PropertySelector(context.getEntity(), emailFieldFocused).getBoolean(false));
        // text=Use Phone
        _cmp.setText("Use Phone");
        // 3 child nodes
        // Create child components
        // 3 child nodes
        // <script> tag
        script46(_cmp);
        // Set up bindings
        {
            // Binding for bind-hidden=!${emailFieldFocused}.bool
            final com.codename1.ui.Button _fcmp = _cmp;
            PropertySelector _propertySelector = null;
            Runnable _onUpdate = ()-> {
                try {
                    java.lang.Boolean _oldVal = null;
                    {Object __tmp__oldVal=_fcmp.isHidden();_oldVal=(__tmp__oldVal==null)?null:(java.lang.Boolean)__tmp__oldVal;}
                    java.lang.Boolean _newVal = !new com.codename1.rad.models.PropertySelector(context.getEntity(), emailFieldFocused).getBoolean(false);
                    if (!java.util.Objects.equals(_newVal, _oldVal)) {
                        _fcmp.setHidden(_newVal);
                        revalidateLater();

                    }
                } catch (Exception ex){ex.printStackTrace();}
            };
            if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
            } else {
                addUpdateListener(_onUpdate);
            }
        } // END Binding for property bind-hidden
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Container createComponent47() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("layout-constraint", "east");
         attributes.put("rad-id", "47");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "x", attributes);
        _builder.setParentContainer(_currentContainer, null);
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // 3 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 3 child nodes
        // Child tag button is type com.codename1.ui.Button
        // Add child component  with child tag button
        {
            com.codename1.ui.Component _childCmp = createComponent48();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.ui.Button createComponent48() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "48");
         attributes.put("text", "Next");
        com.codename1.ui.Button _cmp = new com.codename1.ui.Button();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.ui.Button>(_cmp, context, "button", attributes);
        // text=Next
        _cmp.setText("Next");
        // 3 child nodes
        // Create child components
        // 3 child nodes
        // Child tag bind-action is type null
        // Set up bindings
        // Set up action Bindings
        {
            ActionNode __action = getViewNode().getInheritedAction(NEXT);
            if (__action == null) _cmp.setVisible(false);
            else {
                com.codename1.ui.Button _fcmp = _cmp;
                ActionNode _action = __action;
                com.codename1.rad.ui.DefaultActionViewFactory.initUI(_fcmp, context.getEntity(), _action);
                Runnable _onUpdate = () -> {
                    com.codename1.rad.ui.DefaultActionViewFactory.update(_fcmp, context.getEntity(), _action);
                };
                com.codename1.ui.events.ActionListener<PropertyChangeEvent> _pce = pcl -> {
                    _onUpdate.run();
                };
                Runnable _onBind = () -> {
                    context.getEntity().addPropertyChangeListener(_pce);
                };
                Runnable _onUnbind = () -> {
                    context.getEntity().removePropertyChangeListener(_pce);
                };
                addBindListener(_onBind);
                addUnbindListener(_onUnbind);
                if (view instanceof com.codename1.rad.ui.AbstractEntityView) {
                    ((com.codename1.rad.ui.AbstractEntityView)view).addUpdateListener(_onUpdate);
                } else {
                    addUpdateListener(_onUpdate);
                }
            }
        }
        return _cmp;
    }
    private com.codename1.rad.ui.beans.Title createBean19() {
        com.codename1.rad.ui.beans.Title _bean = new com.codename1.rad.ui.beans.Title(new com.codename1.rad.ui.ViewContext(context.getController(), context.getEntity()));
        {
            com.codename1.ui.Component _injectedValue = createComponent20();
            if (_injectedValue != null) _bean.setComponent((com.codename1.ui.Component)_injectedValue);
        }
        // 4 child nodes
        // Create child nodes
        // 4 child nodes
        return _bean;
    }
    @Override
    public void commit() {}
    @Override
    public void update() {}
    @Override
    public void activate() {
        super.activate();
    }
    private <T extends Node> T _setParent(Class<T> cls, T node) {
        node.setParent(getViewNode());
        return node;
    }
    private <T> T _getInjectedParameter(Class<T> type, ViewContext context, Controller controller) {
        T lookedUp = (T)controller.lookup(type);
        if (lookedUp != null) return lookedUp;
        if (type == ViewContext.class) return (T)context;
        if (Entity.class.isAssignableFrom(type)) return (T)context.getEntity();
        if (type.isAssignableFrom(this.getClass())) return (T)this;
        if (type.isAssignableFrom(controller.getClass())) return (T)controller;
        if (type.isAssignableFrom(FormController.class)) return (T)formController;
        if (type.isAssignableFrom(ApplicationController.class)) return (T)applicationController;
        if (type.isAssignableFrom(ViewController.class)) return (T)viewController;
        return null;
    }
    @Override
    protected void initComponent() {
        super.initComponent();
        if (__initOnceListeners != null && !__initOnceListeners.isEmpty()) {
            java.util.List<Runnable> toRun = new java.util.ArrayList<Runnable>(__initOnceListeners);
            __initOnceListeners = null;
            for (Runnable r : toRun) r.run();
        }
    }
    @Override
    protected void deinitialize() {
        if (__deinitListeners != null && !__deinitListeners.isEmpty()) {
            java.util.List<Runnable> toRun = new java.util.ArrayList<Runnable>(__deinitListeners);
            for (Runnable r : toRun) r.run();
        }
        super.deinitialize();
    }
    private void addInitOnceListener(Runnable r) {
        if (__initOnceListeners == null) __initOnceListeners = new java.util.ArrayList<>();
        __initOnceListeners.add(r);
    }
    private void addDeinitListener(Runnable r) {
        if (__deinitListeners == null) __deinitListeners = new java.util.ArrayList<>();
        __deinitListeners.add(r);
    }
    private void back() {
        com.codename1.rad.controllers.ActionSupport.dispatchEvent(new com.codename1.rad.controllers.FormController.FormBackEvent(this));
    }
}
